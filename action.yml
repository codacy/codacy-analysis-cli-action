# action.yml
name: "Codacy Analysis CLI"
author: "Codacy"
description: "Execute Codacy code analysis using your remote Codacy configuration"
branding:
  icon: "check"
  color: "gray-dark"
inputs:
  verbose:
    required: false
    description: "Run with verbose output"
  project-token:
    required: false
    description: "API project token to retrieve your remote Codacy configuration for the project being analyzed"
  api-token:
    required: false
    description: "API user token to retrieve your remote Codacy configuration for the project being analyzed"
  codacy-api-base-url:
    required: false
    description: "Codacy's API URL, to retrieve your remote Codacy configuration"
  format:
    required: false
    description: "Format of the output file"
  output:
    required: false
    description: "Send analysis results to an output file"
  directory:
    required: false
    description: "The directory to be analyzed"
  parallel:
    required: false
    description: "Number of tools to run in parallel"
  max-allowed-issues:
    required: false
    description: "Maximum number of issues allowed for the analysis to succeed"
  tool:
    required: false
    description: "The name of the tool to analyze the code"
  tool-timeout:
    required: false
    description: "Maximum time each tool has to execute"
  upload:
    required: false
    description: "Upload analysis results to Codacy"
  fail-if-incomplete:
    required: false
    description: "Fail the analysis if any tool fails to run"
  allow-network:
    required: false
    description: "Allow network access for tools"
  force-file-permissions:
    required: false
    description: "Force files to be readable by changing the permissions before running the analysis"
  gh-code-scanning-compat:
    required: false
    description: >-
      Reduce issue severity by one level, for non-security issues, for compatibility with GitHub's code scanning feature.
      This option will only have an effect when used in conjunction with '--format sarif'.
runs:
  using: "composite"
  steps:
    - name: "Set Repository Variables"
      shell: bash
      run: |
        echo "OWNER_NAME=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 1)" >> $GITHUB_ENV
        echo "REPOSITORY_NAME=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)" >> $GITHUB_ENV
    - name: "Set Codacy CLI version"
      shell: bash
      run: echo "CODACY_ANALYSIS_CLI_VERSION=5.2.1" >> $GITHUB_ENV
    - name: "Set script path environment variable"
      shell: bash
      run: echo "CLI_SCRIPT_PATH=${{ github.action_path }}/codacy-analysis-cli.sh" >> $GITHUB_ENV
    - name: "Download Codacy CLI script"
      shell: bash
      run: wget -O - https://raw.githubusercontent.com/codacy/codacy-analysis-cli/${{ env.CODACY_ANALYSIS_CLI_VERSION }}/bin/codacy-analysis-cli.sh > ${{ env.CLI_SCRIPT_PATH }}
    - name: "Change Codacy CLI script permissions"
      shell: bash
      run: chmod +x ${{ env.CLI_SCRIPT_PATH }}
    - name: "Run Codacy CLI"
      shell: bash
      run: |
        ${{ env.CLI_SCRIPT_PATH }}
          analyze
          $(if [ ${{ inputs.verbose }} = true ]; then echo "--verbose"; fi)
          $(if [ ${{ inputs.project-token }} ]; then echo "--project-token ${{ inputs.project-token }}"; fi)
          $(if [ ${{ inputs.api-token }} ]; then echo "--api-token ${{ inputs.api-token }} --username $OWNER_NAME --project $REPOSITORY_NAME"; fi)
          $(if [ ${{ inputs.codacy-api-base-url }} ]; then echo "--codacy-api-base-url ${{ inputs.codacy-api-base-url }}"; fi)
          $(if [ ${{ inputs.format }} ]; then echo "--format ${{ inputs.format }}"; fi)
          $(if [ ${{ inputs.output }} ]; then echo "--output ${{ inputs.output }}"; fi)
          $(if [ ${{ inputs.directory }} ]; then echo "--directory ${{ inputs.directory }}"; fi)
          $(if [ ${{ inputs.parallel }} ]; then echo "--parallel ${{ inputs.parallel }}"; fi)
          $(if [ ${{ inputs.max-allowed-issues }} ]; then echo "--max-allowed-issues ${{ inputs.max-allowed-issues }}"; fi)
          $(if [ ${{ inputs.tool }} ]; then echo "--tool ${{ inputs.tool }}"; fi)
          $(if [ ${{ inputs.tool-timeout }} ]; then echo "--tool-timeout ${{ inputs.tool-timeout }}"; fi)
          $(if [ ${{ inputs.upload }} = true ]; then echo "--upload"; fi)
          $(if [ ${{ inputs.fail-if-incomplete }} = true ]; then echo "--fail-if-incomplete"; fi)
          $(if [ ${{ inputs.allow-network }} = true ]; then echo "--allow-network"; fi)
          $(if [ ${{ inputs.force-file-permissions }} = true ]; then echo "--force-file-permissions"; fi)
          $(if [ ${{ inputs.gh-code-scanning-compat }} = true ]; then echo "--gh-code-scanning-compat"; fi)
